import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

d1 = pd.read_csv("Polis Data.csv")
PolisData = pd.DataFrame(d1)
PolisClean = PolisData[["Material category", "Material type (from notes)", "Object", "Context (3)", "Part width (Note)", "Part thickness (Note)", "Part height (Note)", "Part length (Note)"]]
PolisClean = PolisClean.rename(columns={'Material category': 'material_category', 'Material type (from notes)': 'material_type', 'Context (3)': 'context_three', 'Part width (Note)': 'part_width', 'Part thickness (Note)': 'part_thickness', 'Part height (Note)': 'part_height', 'Part length (Note)': 'part_length'})


def categorize_data(to_categorize, categories):
    for i, entry in enumerate(to_categorize):
        
        # Check for item within entry and replace with proper category if found
        for j, item in enumerate(categories):
            if item in entry:
                to_categorize[i] = (categories[j])
        
        # If entry is not an existing category, replace with other
        if to_categorize[i] not in categories:
            to_categorize[i] = "Other"
        
    return to_categorize

def create_pie(data, title):
    categories = data.value_counts()
    labels = data.value_counts().index.tolist()

    plt.pie(categories, labels = labels)
    plt.title(title)
    plt.show()

def create_bar(data, title):
    categories = data.value_counts()
    labels = data.value_counts().index.tolist()

    plt.bar(labels, categories)
    plt.title(title)
    plt.show()

def graph_per_context(context, specific_context, column, title):
    context_matrix = context == specific_context
    context_data = PolisClean[context_matrix]
    create_pie(context_data[column], title + specific_context)
    create_bar(context_data[column], title + specific_context)


# Clean and Visualize Artifact Material Categories
PolisClean['material_category'] = PolisClean['material_category'].fillna("Other")
cat_list = PolisClean.loc[:,"material_category"].values.tolist()
new_mat_cat = categorize_data(cat_list,["Architectural Misc", "Architectural Stone", "Architectural Terracotta", "Bone, Ivory, Shell", "Bronze", "Glass", "Iron", "Miscellaneous Ceramic", "Mosaic Tesserae", "Numismatics", "Organic", "Pottery", "Slag", "Stone Objects", "Terracotta Figurines", "Terracotta Lamps"])
PolisClean['material_category'] = new_mat_cat

create_pie(PolisClean['material_category'], "Polis Material Categories")

# Clean and Visualize Artifact Material Types
PolisClean['material_type'] = PolisClean['material_type'].fillna("Other")
type_list = PolisClean.loc[:,"material_type"].values.tolist()
new_type_cat = categorize_data(type_list, ["Terracotta", "Bone", "Carbon", "Bronze", "Ceramic", "Charcoal", "Clay", "Copper", "Glass", "Iron", "Limestone", "Marble", "Metal", "Plaster", "Shell", "Slag", "Stone"])
PolisClean['material_type'] = new_type_cat

create_pie(PolisClean['material_type'], "Polis Material Types")


PolisClean.to_csv('Polis Clean.csv')


# Visualize Material Types per Context
graph_per_context(PolisClean['context_three'], 'B.D7:t19-2000', "material_type", "Material Types of Context ")